/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.pekko.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Trade extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7169405938995606879L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Trade\",\"namespace\":\"com.example.pekko.model\",\"fields\":[{\"name\":\"tradeId\",\"type\":\"string\",\"doc\":\"Unique identifier for the trade\"},{\"name\":\"fromCurrency\",\"type\":\"string\",\"doc\":\"Base currency code (e.g., USD)\"},{\"name\":\"toCurrency\",\"type\":\"string\",\"doc\":\"Quote currency code (e.g., EUR)\"},{\"name\":\"notional\",\"type\":\"double\",\"doc\":\"Trade notional amount\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Timestamp when the trade was created\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<Trade> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Trade> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Trade> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Trade> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Trade> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Trade to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Trade from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Trade instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Trade fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for the trade */
  private java.lang.CharSequence tradeId;
  /** Base currency code (e.g., USD) */
  private java.lang.CharSequence fromCurrency;
  /** Quote currency code (e.g., EUR) */
  private java.lang.CharSequence toCurrency;
  /** Trade notional amount */
  private double notional;
  /** Timestamp when the trade was created */
  private java.time.Instant timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Trade() {}

  /**
   * All-args constructor.
   * @param tradeId Unique identifier for the trade
   * @param fromCurrency Base currency code (e.g., USD)
   * @param toCurrency Quote currency code (e.g., EUR)
   * @param notional Trade notional amount
   * @param timestamp Timestamp when the trade was created
   */
  public Trade(java.lang.CharSequence tradeId, java.lang.CharSequence fromCurrency, java.lang.CharSequence toCurrency, java.lang.Double notional, java.time.Instant timestamp) {
    this.tradeId = tradeId;
    this.fromCurrency = fromCurrency;
    this.toCurrency = toCurrency;
    this.notional = notional;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tradeId;
    case 1: return fromCurrency;
    case 2: return toCurrency;
    case 3: return notional;
    case 4: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tradeId = (java.lang.CharSequence)value$; break;
    case 1: fromCurrency = (java.lang.CharSequence)value$; break;
    case 2: toCurrency = (java.lang.CharSequence)value$; break;
    case 3: notional = (java.lang.Double)value$; break;
    case 4: timestamp = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'tradeId' field.
   * @return Unique identifier for the trade
   */
  public java.lang.CharSequence getTradeId() {
    return tradeId;
  }


  /**
   * Sets the value of the 'tradeId' field.
   * Unique identifier for the trade
   * @param value the value to set.
   */
  public void setTradeId(java.lang.CharSequence value) {
    this.tradeId = value;
  }

  /**
   * Gets the value of the 'fromCurrency' field.
   * @return Base currency code (e.g., USD)
   */
  public java.lang.CharSequence getFromCurrency() {
    return fromCurrency;
  }


  /**
   * Sets the value of the 'fromCurrency' field.
   * Base currency code (e.g., USD)
   * @param value the value to set.
   */
  public void setFromCurrency(java.lang.CharSequence value) {
    this.fromCurrency = value;
  }

  /**
   * Gets the value of the 'toCurrency' field.
   * @return Quote currency code (e.g., EUR)
   */
  public java.lang.CharSequence getToCurrency() {
    return toCurrency;
  }


  /**
   * Sets the value of the 'toCurrency' field.
   * Quote currency code (e.g., EUR)
   * @param value the value to set.
   */
  public void setToCurrency(java.lang.CharSequence value) {
    this.toCurrency = value;
  }

  /**
   * Gets the value of the 'notional' field.
   * @return Trade notional amount
   */
  public double getNotional() {
    return notional;
  }


  /**
   * Sets the value of the 'notional' field.
   * Trade notional amount
   * @param value the value to set.
   */
  public void setNotional(double value) {
    this.notional = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp when the trade was created
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp when the trade was created
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new Trade RecordBuilder.
   * @return A new Trade RecordBuilder
   */
  public static com.example.pekko.model.Trade.Builder newBuilder() {
    return new com.example.pekko.model.Trade.Builder();
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Trade RecordBuilder
   */
  public static com.example.pekko.model.Trade.Builder newBuilder(com.example.pekko.model.Trade.Builder other) {
    if (other == null) {
      return new com.example.pekko.model.Trade.Builder();
    } else {
      return new com.example.pekko.model.Trade.Builder(other);
    }
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Trade instance.
   * @param other The existing instance to copy.
   * @return A new Trade RecordBuilder
   */
  public static com.example.pekko.model.Trade.Builder newBuilder(com.example.pekko.model.Trade other) {
    if (other == null) {
      return new com.example.pekko.model.Trade.Builder();
    } else {
      return new com.example.pekko.model.Trade.Builder(other);
    }
  }

  /**
   * RecordBuilder for Trade instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Trade>
    implements org.apache.avro.data.RecordBuilder<Trade> {

    /** Unique identifier for the trade */
    private java.lang.CharSequence tradeId;
    /** Base currency code (e.g., USD) */
    private java.lang.CharSequence fromCurrency;
    /** Quote currency code (e.g., EUR) */
    private java.lang.CharSequence toCurrency;
    /** Trade notional amount */
    private double notional;
    /** Timestamp when the trade was created */
    private java.time.Instant timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.pekko.model.Trade.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tradeId)) {
        this.tradeId = data().deepCopy(fields()[0].schema(), other.tradeId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fromCurrency)) {
        this.fromCurrency = data().deepCopy(fields()[1].schema(), other.fromCurrency);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.toCurrency)) {
        this.toCurrency = data().deepCopy(fields()[2].schema(), other.toCurrency);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.notional)) {
        this.notional = data().deepCopy(fields()[3].schema(), other.notional);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Trade instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.pekko.model.Trade other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.tradeId)) {
        this.tradeId = data().deepCopy(fields()[0].schema(), other.tradeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fromCurrency)) {
        this.fromCurrency = data().deepCopy(fields()[1].schema(), other.fromCurrency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.toCurrency)) {
        this.toCurrency = data().deepCopy(fields()[2].schema(), other.toCurrency);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.notional)) {
        this.notional = data().deepCopy(fields()[3].schema(), other.notional);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'tradeId' field.
      * Unique identifier for the trade
      * @return The value.
      */
    public java.lang.CharSequence getTradeId() {
      return tradeId;
    }


    /**
      * Sets the value of the 'tradeId' field.
      * Unique identifier for the trade
      * @param value The value of 'tradeId'.
      * @return This builder.
      */
    public com.example.pekko.model.Trade.Builder setTradeId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.tradeId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeId' field has been set.
      * Unique identifier for the trade
      * @return True if the 'tradeId' field has been set, false otherwise.
      */
    public boolean hasTradeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tradeId' field.
      * Unique identifier for the trade
      * @return This builder.
      */
    public com.example.pekko.model.Trade.Builder clearTradeId() {
      tradeId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fromCurrency' field.
      * Base currency code (e.g., USD)
      * @return The value.
      */
    public java.lang.CharSequence getFromCurrency() {
      return fromCurrency;
    }


    /**
      * Sets the value of the 'fromCurrency' field.
      * Base currency code (e.g., USD)
      * @param value The value of 'fromCurrency'.
      * @return This builder.
      */
    public com.example.pekko.model.Trade.Builder setFromCurrency(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fromCurrency = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fromCurrency' field has been set.
      * Base currency code (e.g., USD)
      * @return True if the 'fromCurrency' field has been set, false otherwise.
      */
    public boolean hasFromCurrency() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fromCurrency' field.
      * Base currency code (e.g., USD)
      * @return This builder.
      */
    public com.example.pekko.model.Trade.Builder clearFromCurrency() {
      fromCurrency = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'toCurrency' field.
      * Quote currency code (e.g., EUR)
      * @return The value.
      */
    public java.lang.CharSequence getToCurrency() {
      return toCurrency;
    }


    /**
      * Sets the value of the 'toCurrency' field.
      * Quote currency code (e.g., EUR)
      * @param value The value of 'toCurrency'.
      * @return This builder.
      */
    public com.example.pekko.model.Trade.Builder setToCurrency(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.toCurrency = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'toCurrency' field has been set.
      * Quote currency code (e.g., EUR)
      * @return True if the 'toCurrency' field has been set, false otherwise.
      */
    public boolean hasToCurrency() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'toCurrency' field.
      * Quote currency code (e.g., EUR)
      * @return This builder.
      */
    public com.example.pekko.model.Trade.Builder clearToCurrency() {
      toCurrency = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'notional' field.
      * Trade notional amount
      * @return The value.
      */
    public double getNotional() {
      return notional;
    }


    /**
      * Sets the value of the 'notional' field.
      * Trade notional amount
      * @param value The value of 'notional'.
      * @return This builder.
      */
    public com.example.pekko.model.Trade.Builder setNotional(double value) {
      validate(fields()[3], value);
      this.notional = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'notional' field has been set.
      * Trade notional amount
      * @return True if the 'notional' field has been set, false otherwise.
      */
    public boolean hasNotional() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'notional' field.
      * Trade notional amount
      * @return This builder.
      */
    public com.example.pekko.model.Trade.Builder clearNotional() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp when the trade was created
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp when the trade was created
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.example.pekko.model.Trade.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[4], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp when the trade was created
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp when the trade was created
      * @return This builder.
      */
    public com.example.pekko.model.Trade.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Trade build() {
      try {
        Trade record = new Trade();
        record.tradeId = fieldSetFlags()[0] ? this.tradeId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.fromCurrency = fieldSetFlags()[1] ? this.fromCurrency : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.toCurrency = fieldSetFlags()[2] ? this.toCurrency : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.notional = fieldSetFlags()[3] ? this.notional : (java.lang.Double) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.time.Instant) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Trade>
    WRITER$ = (org.apache.avro.io.DatumWriter<Trade>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Trade>
    READER$ = (org.apache.avro.io.DatumReader<Trade>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










