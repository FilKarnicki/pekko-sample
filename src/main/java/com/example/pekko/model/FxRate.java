/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.pekko.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Foreign exchange rate data */
@org.apache.avro.specific.AvroGenerated
public class FxRate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 258543814174991963L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FxRate\",\"namespace\":\"com.example.pekko.model\",\"doc\":\"Foreign exchange rate data\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"Unique identifier for the FX rate record\"},{\"name\":\"fromCurrency\",\"type\":\"string\",\"doc\":\"Source currency code (e.g., USD)\"},{\"name\":\"toCurrency\",\"type\":\"string\",\"doc\":\"Target currency code (e.g., EUR)\"},{\"name\":\"rate\",\"type\":\"double\",\"doc\":\"Exchange rate from source to target currency\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Timestamp when the rate was recorded (milliseconds since epoch)\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"source\",\"type\":[\"null\",\"string\"],\"doc\":\"Source of the exchange rate data\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FxRate> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FxRate> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FxRate> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FxRate> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FxRate> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FxRate to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FxRate from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FxRate instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FxRate fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for the FX rate record */
  private java.lang.CharSequence id;
  /** Source currency code (e.g., USD) */
  private java.lang.CharSequence fromCurrency;
  /** Target currency code (e.g., EUR) */
  private java.lang.CharSequence toCurrency;
  /** Exchange rate from source to target currency */
  private double rate;
  /** Timestamp when the rate was recorded (milliseconds since epoch) */
  private long timestamp;
  /** Source of the exchange rate data */
  private java.lang.CharSequence source;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FxRate() {}

  /**
   * All-args constructor.
   * @param id Unique identifier for the FX rate record
   * @param fromCurrency Source currency code (e.g., USD)
   * @param toCurrency Target currency code (e.g., EUR)
   * @param rate Exchange rate from source to target currency
   * @param timestamp Timestamp when the rate was recorded (milliseconds since epoch)
   * @param source Source of the exchange rate data
   */
  public FxRate(java.lang.CharSequence id, java.lang.CharSequence fromCurrency, java.lang.CharSequence toCurrency, java.lang.Double rate, java.lang.Long timestamp, java.lang.CharSequence source) {
    this.id = id;
    this.fromCurrency = fromCurrency;
    this.toCurrency = toCurrency;
    this.rate = rate;
    this.timestamp = timestamp;
    this.source = source;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return fromCurrency;
    case 2: return toCurrency;
    case 3: return rate;
    case 4: return timestamp;
    case 5: return source;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: fromCurrency = (java.lang.CharSequence)value$; break;
    case 2: toCurrency = (java.lang.CharSequence)value$; break;
    case 3: rate = (java.lang.Double)value$; break;
    case 4: timestamp = (java.lang.Long)value$; break;
    case 5: source = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Unique identifier for the FX rate record
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Unique identifier for the FX rate record
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'fromCurrency' field.
   * @return Source currency code (e.g., USD)
   */
  public java.lang.CharSequence getFromCurrency() {
    return fromCurrency;
  }


  /**
   * Sets the value of the 'fromCurrency' field.
   * Source currency code (e.g., USD)
   * @param value the value to set.
   */
  public void setFromCurrency(java.lang.CharSequence value) {
    this.fromCurrency = value;
  }

  /**
   * Gets the value of the 'toCurrency' field.
   * @return Target currency code (e.g., EUR)
   */
  public java.lang.CharSequence getToCurrency() {
    return toCurrency;
  }


  /**
   * Sets the value of the 'toCurrency' field.
   * Target currency code (e.g., EUR)
   * @param value the value to set.
   */
  public void setToCurrency(java.lang.CharSequence value) {
    this.toCurrency = value;
  }

  /**
   * Gets the value of the 'rate' field.
   * @return Exchange rate from source to target currency
   */
  public double getRate() {
    return rate;
  }


  /**
   * Sets the value of the 'rate' field.
   * Exchange rate from source to target currency
   * @param value the value to set.
   */
  public void setRate(double value) {
    this.rate = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp when the rate was recorded (milliseconds since epoch)
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp when the rate was recorded (milliseconds since epoch)
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return Source of the exchange rate data
   */
  public java.lang.CharSequence getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * Source of the exchange rate data
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Creates a new FxRate RecordBuilder.
   * @return A new FxRate RecordBuilder
   */
  public static com.example.pekko.model.FxRate.Builder newBuilder() {
    return new com.example.pekko.model.FxRate.Builder();
  }

  /**
   * Creates a new FxRate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FxRate RecordBuilder
   */
  public static com.example.pekko.model.FxRate.Builder newBuilder(com.example.pekko.model.FxRate.Builder other) {
    if (other == null) {
      return new com.example.pekko.model.FxRate.Builder();
    } else {
      return new com.example.pekko.model.FxRate.Builder(other);
    }
  }

  /**
   * Creates a new FxRate RecordBuilder by copying an existing FxRate instance.
   * @param other The existing instance to copy.
   * @return A new FxRate RecordBuilder
   */
  public static com.example.pekko.model.FxRate.Builder newBuilder(com.example.pekko.model.FxRate other) {
    if (other == null) {
      return new com.example.pekko.model.FxRate.Builder();
    } else {
      return new com.example.pekko.model.FxRate.Builder(other);
    }
  }

  /**
   * RecordBuilder for FxRate instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FxRate>
    implements org.apache.avro.data.RecordBuilder<FxRate> {

    /** Unique identifier for the FX rate record */
    private java.lang.CharSequence id;
    /** Source currency code (e.g., USD) */
    private java.lang.CharSequence fromCurrency;
    /** Target currency code (e.g., EUR) */
    private java.lang.CharSequence toCurrency;
    /** Exchange rate from source to target currency */
    private double rate;
    /** Timestamp when the rate was recorded (milliseconds since epoch) */
    private long timestamp;
    /** Source of the exchange rate data */
    private java.lang.CharSequence source;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.pekko.model.FxRate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fromCurrency)) {
        this.fromCurrency = data().deepCopy(fields()[1].schema(), other.fromCurrency);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.toCurrency)) {
        this.toCurrency = data().deepCopy(fields()[2].schema(), other.toCurrency);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.rate)) {
        this.rate = data().deepCopy(fields()[3].schema(), other.rate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.source)) {
        this.source = data().deepCopy(fields()[5].schema(), other.source);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing FxRate instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.pekko.model.FxRate other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fromCurrency)) {
        this.fromCurrency = data().deepCopy(fields()[1].schema(), other.fromCurrency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.toCurrency)) {
        this.toCurrency = data().deepCopy(fields()[2].schema(), other.toCurrency);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.rate)) {
        this.rate = data().deepCopy(fields()[3].schema(), other.rate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.source)) {
        this.source = data().deepCopy(fields()[5].schema(), other.source);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Unique identifier for the FX rate record
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Unique identifier for the FX rate record
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.example.pekko.model.FxRate.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Unique identifier for the FX rate record
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Unique identifier for the FX rate record
      * @return This builder.
      */
    public com.example.pekko.model.FxRate.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fromCurrency' field.
      * Source currency code (e.g., USD)
      * @return The value.
      */
    public java.lang.CharSequence getFromCurrency() {
      return fromCurrency;
    }


    /**
      * Sets the value of the 'fromCurrency' field.
      * Source currency code (e.g., USD)
      * @param value The value of 'fromCurrency'.
      * @return This builder.
      */
    public com.example.pekko.model.FxRate.Builder setFromCurrency(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fromCurrency = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fromCurrency' field has been set.
      * Source currency code (e.g., USD)
      * @return True if the 'fromCurrency' field has been set, false otherwise.
      */
    public boolean hasFromCurrency() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fromCurrency' field.
      * Source currency code (e.g., USD)
      * @return This builder.
      */
    public com.example.pekko.model.FxRate.Builder clearFromCurrency() {
      fromCurrency = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'toCurrency' field.
      * Target currency code (e.g., EUR)
      * @return The value.
      */
    public java.lang.CharSequence getToCurrency() {
      return toCurrency;
    }


    /**
      * Sets the value of the 'toCurrency' field.
      * Target currency code (e.g., EUR)
      * @param value The value of 'toCurrency'.
      * @return This builder.
      */
    public com.example.pekko.model.FxRate.Builder setToCurrency(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.toCurrency = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'toCurrency' field has been set.
      * Target currency code (e.g., EUR)
      * @return True if the 'toCurrency' field has been set, false otherwise.
      */
    public boolean hasToCurrency() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'toCurrency' field.
      * Target currency code (e.g., EUR)
      * @return This builder.
      */
    public com.example.pekko.model.FxRate.Builder clearToCurrency() {
      toCurrency = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'rate' field.
      * Exchange rate from source to target currency
      * @return The value.
      */
    public double getRate() {
      return rate;
    }


    /**
      * Sets the value of the 'rate' field.
      * Exchange rate from source to target currency
      * @param value The value of 'rate'.
      * @return This builder.
      */
    public com.example.pekko.model.FxRate.Builder setRate(double value) {
      validate(fields()[3], value);
      this.rate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'rate' field has been set.
      * Exchange rate from source to target currency
      * @return True if the 'rate' field has been set, false otherwise.
      */
    public boolean hasRate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'rate' field.
      * Exchange rate from source to target currency
      * @return This builder.
      */
    public com.example.pekko.model.FxRate.Builder clearRate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp when the rate was recorded (milliseconds since epoch)
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp when the rate was recorded (milliseconds since epoch)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.example.pekko.model.FxRate.Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp when the rate was recorded (milliseconds since epoch)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp when the rate was recorded (milliseconds since epoch)
      * @return This builder.
      */
    public com.example.pekko.model.FxRate.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * Source of the exchange rate data
      * @return The value.
      */
    public java.lang.CharSequence getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * Source of the exchange rate data
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.example.pekko.model.FxRate.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.source = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * Source of the exchange rate data
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'source' field.
      * Source of the exchange rate data
      * @return This builder.
      */
    public com.example.pekko.model.FxRate.Builder clearSource() {
      source = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FxRate build() {
      try {
        FxRate record = new FxRate();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.fromCurrency = fieldSetFlags()[1] ? this.fromCurrency : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.toCurrency = fieldSetFlags()[2] ? this.toCurrency : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.rate = fieldSetFlags()[3] ? this.rate : (java.lang.Double) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.source = fieldSetFlags()[5] ? this.source : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FxRate>
    WRITER$ = (org.apache.avro.io.DatumWriter<FxRate>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FxRate>
    READER$ = (org.apache.avro.io.DatumReader<FxRate>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.fromCurrency);

    out.writeString(this.toCurrency);

    out.writeDouble(this.rate);

    out.writeLong(this.timestamp);

    if (this.source == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.source);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.fromCurrency = in.readString(this.fromCurrency instanceof Utf8 ? (Utf8)this.fromCurrency : null);

      this.toCurrency = in.readString(this.toCurrency instanceof Utf8 ? (Utf8)this.toCurrency : null);

      this.rate = in.readDouble();

      this.timestamp = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.source = null;
      } else {
        this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.fromCurrency = in.readString(this.fromCurrency instanceof Utf8 ? (Utf8)this.fromCurrency : null);
          break;

        case 2:
          this.toCurrency = in.readString(this.toCurrency instanceof Utf8 ? (Utf8)this.toCurrency : null);
          break;

        case 3:
          this.rate = in.readDouble();
          break;

        case 4:
          this.timestamp = in.readLong();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.source = null;
          } else {
            this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










